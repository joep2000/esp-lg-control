esphome:
  name: esp-wp-control

packages:
  config_values: !include config/config.yaml

# Enable logging. Disable modbus controller debug messages
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus_controller.output: WARN     
    esp32.preferences: WARN
    sensor: WARN

globals:
  - id: stooklijn_target
    type: float
    restore_value: no
    initial_value: '30'
  - id: force_update_stooklijn
    type: bool
    restore_value: no
    initial_value: 'true'
  # - id: var_pendel_watertemp_target
  #   type: float
  #   restore_value: no
  #   initial_value: '30'
  # - id: run_start
  #   type: bool
  #   restore_value: no
  #   initial_value: 'false'

number:
  - platform: template
    id: stooklijn_min_oat
    name: "Stooklijn Minimum Buitentemperatuur"
    min_value: -15
    max_value: 4
    step: 1
    restore_value: yes
    initial_value: -5
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_max_oat
    name: "Stooklijn Maximum Buitentemperatuur"
    min_value: 5
    max_value: 20
    step: 1
    restore_value: yes
    initial_value: 13
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_max_wtemp
    name: "Stooklijn Maximum Watertemperatuur"
    min_value: 31
    max_value: 50
    step: 1
    restore_value: yes
    initial_value: 35
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  - platform: template
    id: stooklijn_min_wtemp
    name: "Stooklijn Minimum Watertemperatuur"
    min_value: 26
    max_value: 30
    step: 1
    restore_value: yes
    initial_value: 28
    unit_of_measurement: "°C"
    optimistic: true
    set_action:
      then:
        - lambda: |-
            id(force_update_stooklijn) = true;
  # - platform: template
  #   id: cooling_target_wtemp
  #   name: "Koelmodus Watertemperatuur"
  #   min_value: 16
  #   max_value: 20
  #   step: 1
  #   restore_value: yes
  #   initial_value: 18
  #   unit_of_measurement: "°C"
  #   optimistic: true
  #   set_action:
  #     then:
  #       - lambda: |-
  #           id(force_update_stooklijn) = true;

switch:
  - platform: output
    name: "Silent Mode"
    id: silent_mode_switch
    output: 'modbus_set_silent_mode'
  - platform: template
    id: stooklijn_on_off
    name: "Stooklijn On/Off"
    optimistic: true


modbus:
  id: modbus_lg
  uart_id: uart_modbus
  send_wait_time: 200ms
  
uart:
  id: uart_modbus
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 9600
  parity: none
  data_bits: 8
  stop_bits: 1

modbus_controller:
  - id: lg
    address: 0x1            # the Modbus device addr
    modbus_id: modbus_lg
    update_interval: 10s    #this is our main 'clock' all dependel logic follows this pace
    setup_priority: -10

output:
  - platform: modbus_controller
    modbus_controller_id: lg
    id: water_temp_target_output
    register_type: holding
    address: 2
    value_type: U_WORD
    multiply: 1000
  - platform: modbus_controller
    modbus_controller_id: lg
    id: modbus_set_silent_mode
    register_type: coil
    address: 2

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Pump Running"
    id: pump_running
    register_type: discrete_input
    skip_updates: 3
    address: 1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Compressor Running"
    id: compressor_running
    register_type: discrete_input
    skip_updates: 3
    address: 3
    # on_turn_on:
    #   then:
    #     - lambda: |-
    #         id(run_start) = true;
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Defrosting"
    id: defrosting
    register_type: discrete_input
    skip_updates: 3
    address: 4
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "DHW mode"
    id: dhw_mode
    register_type: discrete_input
    skip_updates: 3
    address: 5
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Silent Mode"
    id: silent_mode
    register_type: discrete_input
    skip_updates: 3
    address: 7
    on_state:
      then:
        - lambda: |-
            if(id(silent_mode).state != id(silent_mode_switch).state) id(silent_mode_switch).publish_state(id(silent_mode).state);
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Cooling mode"
    id: cooling_mode
    register_type: discrete_input
    skip_updates: 3
    address: 8
    filters:
      - invert:
    
sensor:
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Bedrijfsmodus"
    id: bedrijfsmodus
    register_type: read
    address: 1
    value_type: U_WORD
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Water retour"
    id: water_temp_retour
    register_type: read
    address: 2
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Water aanvoer"
    id: water_temp_aanvoer
    register_type: read
    address: 3
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    on_value:
      then:
        - lambda: |-
            //Main program logic this loop runs every 'clock' cycle when modbus data is received for this sensor            
            //Do not run script if working mode = 0
            if(id(bedrijfsmodus).state != 2 || id(dhw_mode).state) return;
            if(isnan(id(buiten_temp).state)) return;
            if(!id(stooklijn_on_off).state) return;

            
            static float prev_oat = 0;                                 // hold previous script run ota value to check if it changed since last run
            static float prev_tr = id(water_temp_retour).state;
            float temp_new_target = id(watertemp_target).state;   //new anti-pendel target
            static bool target_reached = false;                        //system logic (to switch off after target is reached)


                // ----------------calculate stooklijn target---------------------------------
            float oat = round(id(buiten_temp).state);

            if(prev_oat != oat || id(force_update_stooklijn)){      // if no oat change, no update needed, unless forced or first run
              prev_oat = oat;
              id(force_update_stooklijn) = false;                       //reset force boolean
              
                  //Heating
                  //formula is wTemp = Z x (oat - twmin) + twmax
                  //formula to calculate Z = (twmin - twmax) / (oatmax - oatmin)
              const float Z = ((float)id(stooklijn_min_wtemp).state-(float)id(stooklijn_max_wtemp).state) / ((float)id(stooklijn_max_oat).state - (float)id(stooklijn_min_oat).state);
              ESP_LOGD("stooklijn", "Stooklijn, working mode is heating, with oat: %f, Z: %f",oat, Z);
              if(oat < id(stooklijn_min_oat).state) {                       //if oat below minimum oat, clamp to minimum value
                oat = id(stooklijn_min_oat).state;
              } else if(oat > id(stooklijn_max_oat).state) {                //if oat above max value, clamp to maximum value
                oat = id(stooklijn_max_oat).state;
              }
              id(stooklijn_target) = (int)round(Z * (oat - id(stooklijn_min_oat).state) + id(stooklijn_max_wtemp).state);
              // if(id(stooklijn_target) > id(stooklijn_max_wtemp).state) id(stooklijn_target) = id(stooklijn_max_wtemp).state;  #not necessary
              // if(id(stooklijn_target) < id(stooklijn_min_wtemp).state) id(stooklijn_target) = id(stooklijn_min_wtemp).state;
              
              ESP_LOGD("stooklijn", "New stooklijn target value (after correction): %f", id(stooklijn_target));
              id(watertemp_target).publish_state(id(stooklijn_target));              //publish new stooklijn value to watertemp value sensor
            }
          


                // ---------------------calculate new (anti pendel) target---------------------------------

                // very basic algorithm
                // it initializes at the start of a run (at compressor startup)
                // when the compressor turn on the logic start running, setting a new target at the nearest higher .5 degrees
                // when the new target equals the new target the logic stops, so the HP can take over again and run its own logic
                // system resets at compressor stop

            // if(id(run_start)){
            //       //initialize values. run_start is set to true by the switches that control heating/cooling mode
            //   # pre_run_time = 7;                                  // equals 70 seconds. Based on 10s 'clock'
            //   target_reached = false;                           //activate system
            //   # id(water_temp_target_output).set_level(id(stooklijn_target)*0.01);        //(set level needs value between 0-1, so divide by 100)
            //   ESP_LOGD("anti-pendel", "Modbus initial target set: %f outlet: %f",id(stooklijn_target),id(water_temp_aanvoer).state);
            //   id(run_start) = 0;
            // }
            
            if(((id(stooklijn_target) - id(water_temp_aanvoer).state) > 0) || (id(water_temp_aanvoer).state-id(water_temp_retour).state > 5)){           // check if target is reached
              target_reached = false;
            } else {
              target_reached = true;
            }

                // ----------------------------------Run when compressor is running---------------------------------
            if(id(compressor_running).state){
              if(!target_reached){
                
                float tmp_retour = id(water_temp_retour).state - prev_tr;

                if(tmp_retour >= 0 || tmp_retour < -1){        //retour temp sometimes drops by less than 1 degrC only one measurement
                  // new target = Tr + 5*(Tr-20)/(Tstooklijn-5-20) (5 graden dT | ~20 graden start temp)
                  temp_new_target = round((id(water_temp_retour).state + (6*(id(water_temp_retour).state - 22)) / (id(stooklijn_target) - 27)) * 10 ) / 10;
                  if((temp_new_target-id(water_temp_retour).state) < 3) temp_new_target = id(water_temp_retour).state + 3;
                  prev_tr = id(water_temp_retour).state;
                } else {
                  temp_new_target = round((prev_tr + (6*(prev_tr - 19)) / (id(stooklijn_target) - 26)) * 10 ) / 10;
                  if((temp_new_target-prev_tr) < 3) temp_new_target = prev_tr + 3;
                }

              } else temp_new_target = id(stooklijn_target);


              if(temp_new_target > id(stooklijn_target)) temp_new_target = id(stooklijn_target);        //make sure value is below minimum, or above maximum
              ESP_LOGD("anti-pendel", "RETURN_TEMP: %f OUTLET_TEMP: %f TARGET: %f PENDEL_TARGET: %f",id(water_temp_retour).state,id(water_temp_aanvoer).state,id(stooklijn_target),temp_new_target);
              id(pendel_watertemp_target).publish_state(temp_new_target);                               //update sensor
              id(water_temp_target_output).set_level(temp_new_target*0.01);             //update target through modbus (set level needs value between 0-1, so divide by 100)
            } else if(!id(compressor_running).state) {
              id(water_temp_target_output).set_level(id(stooklijn_target)*0.01);                        //(set level needs value between 0-1, so divide by 100)
              target_reached = false;
              //update pre_run_time counter
              //ESP_LOGD("anti-pendel", "Waiting for pre_run_time: %i",pre_run_time);
              //if(pre_run_time > 0) pre_run_time--;

            }
          

            // if(temp_new_target != id(var_pendel_watertemp_target)){
            //   id(var_pendel_watertemp_target) = temp_new_target;                                       //set new target
            //   id(pendel_watertemp_target).publish_state(id(var_pendel_watertemp_target));              //update sensor
            //   id(water_temp_target_output).set_level(id(var_pendel_watertemp_target)*0.01);            //update target through modbus (set level needs value between 0-1, so divide by 100)
            //   // ESP_LOGD("anti-pendel", "New pendel_watertemp_target set: %f outlet: %f",id(pendel_watertemp_target).state,id(water_temp_aanvoer).state);
            //   # if(temp_new_target == id(stooklijn_target)){
            //   #       //deactive system logic until next run
            //   #   target_reached = true;
            //   #   ESP_LOGD("anti-pendel", "Target reached, system inactive target: %f pendel_target: %f",id(stooklijn_target),id(pendel_watertemp_target).state);
            //   # }
            // }
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "DHW tank"
    id: water_temp_dhw
    register_type: read
    skip_updates: 3
    address: 5
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Tempbinnen"
    id: binnen_temp
    register_type: read
    skip_updates: 3
    address: 7
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  # - platform: modbus_controller
  #   modbus_controller_id: lg
  #   name: "Flow Rate"
  #   id: current_flow_rate
  #   register_type: read
  #   address: 8
  #   unit_of_measurement: "L/m"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Tempbuiten"
    id: buiten_temp
    register_type: read
    skip_updates: 6
    address: 12
    unit_of_measurement: "°C"
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
      - sliding_window_moving_average:
          window_size: 15 
          send_every: 15    
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Compressor RPM"
    id: compressor_rpm
    register_type: read
    address: 24
    unit_of_measurement: "RPM"
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Doeltemperatuur"
    id: doel_temp
    register_type: holding
    address: 2
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    skip_updates: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "Doel DHW"
    id: doel_dhw
    register_type: holding
    address: 8
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    skip_updates: 6
    filters:
      - multiply: 0.1

  - platform: template
    name: "Stooklijn Watertemp Target"
    id: watertemp_target
    unit_of_measurement: "°C"
    update_interval: 3600s
    lambda: |-
        return id(stooklijn_target);
  - platform: template
    name: "Anti-pendel Watertemp Target"
    id: pendel_watertemp_target
    unit_of_measurement: "°C"
    update_interval: 3600s
